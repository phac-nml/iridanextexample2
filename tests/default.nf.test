nextflow_pipeline {

    name "Test pipeline"
    script "../main.nf"
    tag "pipeline"

    test("-profile test,docker") { // Was having an issue with fastqc not being found in the test environment, so added docker to the test profile
        when {
            params {
                outdir = "$outputDir"
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            // stable_path: All files in ${params.outdir}/ with stable content
            def stable_path = getAllFilesFromDir(params.outdir, ignoreFile: 'tests/.nftignore')
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    // Number of successful tasks
                    workflow.trace.succeeded().size(),
                    // pipeline versions.yml file for multiqc from which Nextflow version is removed because we test pipelines on multiple Nextflow versions
                    removeNextflowVersion("$outputDir/pipeline_info/iridanextexample2_software_mqc_versions.yml"),
                    // All stable path name, with a relative path
                    stable_name,
                    // All files with stable contents
                    stable_path
                ).match() }
            )
        }

    }

    test("Check iridanext output") {
        tag "iridanext_output"
        when {
            params {
                outdir = "$outputDir"
            }
        }

        then {
            // Check that the iridanext output file exists and is gzipped
            def iridanextOutput = path("$outputDir/iridanext.output.json").json

            // Check contents of the iridanext output file
            def iridanext_samples = iridanextOutput.files.samples
            assert iridanext_samples.size() > 0
            assert iridanext_samples.SAMPLE2_PE == [['path':'fastqc/SAMPLE2_PE_2_fastqc.html'], ['path':'fastqc/SAMPLE2_PE_1_fastqc.html']]
            assert iridanext_samples.SAMPLE3_SE == [['path':'fastqc/SAMPLE3_SE_2_fastqc.html'], ['path':'fastqc/SAMPLE3_SE_1_fastqc.html']]
            assert iridanext_samples.SAMPLE1_PE == [['path':'fastqc/SAMPLE1_PE_2_fastqc.html'], ['path':'fastqc/SAMPLE1_PE_1_fastqc.html']]

        }
    }
}